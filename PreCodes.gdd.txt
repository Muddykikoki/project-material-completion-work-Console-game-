#codigo pra godot pra testar direito o eu do futuro da proxima vez vé se faz direto na merda do godotScript para não ter que fazer duas vezes.
#
#
#Movimentação do Player
func setup_player_movement(player: CharacterBody2D, 
                          base_speed: float, 
                          crouch_speed: float, 
                          jump_force: float, 
                          gravity: float) -> void:
    
    var is_crouching := false
    var available_jumps := 1
    
    func _physics_process(delta: float) -> void:
        # Aplicar gravidade
        player.velocity.y += gravity * delta
        
        # Movimento horizontal
        var direction = Input.get_axis("ui_left", "ui_right")
        
        if is_crouching:
            player.velocity.x = direction * crouch_speed
        else:
            player.velocity.x = direction * base_speed
        
        # Pulo
        if Input.is_action_just_pressed("ui_up") and player.is_on_floor():
            player.velocity.y = jump_force
            available_jumps -= 1
        
        # Agachar
        is_crouching = Input.is_action_pressed("crouch") and player.is_on_floor()
        
        # Meia plataforma (descer quando agachado)
        if Input.is_action_just_pressed("ui_down") and is_crouching:
            for i in player.get_slide_collision_count():
                var collision = player.get_slide_collision(i)
                if collision.get_collider().is_in_group("half_platform"):
                    player.position.y += 5  # Ajuste conforme necessidade
        
        player.move_and_slide()
#Sistema de Pulos
func unlock_double_jump(player: CharacterBody2D) -> void:
    player.max_jumps = 2

func handle_jumping(player: CharacterBody2D, jump_force: float) -> void:
    if Input.is_action_just_pressed("ui_up"):
        if player.is_on_floor():
            player.velocity.y = jump_force
            player.current_jumps = 1
        elif player.current_jumps < player.max_jumps:
            player.velocity.y = jump_force
            player.current_jumps += 1
#Sistema de Tiros
func setup_shooting(player: Node2D, 
                   bullet_scene: PackedScene, 
                   spawn_point: Node2D, 
                   base_damage: float, 
                   charge_levels: Array) -> void:
    
    var charge_time := 0.0
    var is_charging := false
    
    func _process(delta: float) -> void:
        # Tiro básico
        if Input.is_action_just_pressed("shoot"):
            var bullet = bullet_scene.instantiate()
            bullet.damage = base_damage
            bullet.position = spawn_point.global_position
            get_parent().add_child(bullet)
        
        # Tiro carregado
        if Input.is_action_pressed("charge_shoot") and player.has_charged_shot:
            is_charging = true
            charge_time += delta
        elif is_charging and Input.is_action_just_released("charge_shoot"):
            var bullet = bullet_scene.instantiate()
            bullet.position = spawn_point.global_position
            
            # Determinar nível de carga
            var damage_multiplier = 1.0
            for level in charge_levels:
                if charge_time >= level["time"]:
                    damage_multiplier = level["multiplier"]
            
            bullet.damage = base_damage * damage_multiplier
            get_parent().add_child(bullet)
            
            charge_time = 0.0
            is_charging = false
#Overshield
func setup_overshield(player: Node, 
                     max_shields: int, 
                     recharge_time: float) -> void:
    
    player.available_shields = max_shields
    player.active_shields = max_shields
    var recharge_timers := []
    
    func take_damage(amount: float) -> void:
        if player.active_shields > 0:
            player.active_shields -= 1
            start_recharge_timer()
            return
        # Aplicar dano normal ao player
    
    func start_recharge_timer() -> void:
        var timer = Timer.new()
        timer.wait_time = recharge_time
        timer.one_shot = true
        timer.connect("timeout", recharge_shield)
        add_child(timer)
        timer.start()
        recharge_timers.append(timer)
    
    func recharge_shield() -> void:
        if player.active_shields < player.available_shields:
            player.active_shields += 1
#Sistema de Terminal/Console
func setup_terminal_system(terminal_stations: Array, 
                          player: Node, 
                          command_dictionary: Dictionary) -> void:
    
    var near_terminal := false
    var current_station: Node = null
    
    func _process(_delta: float) -> void:
        # Verificar proximidade com terminais
        for station in terminal_stations:
            if player.global_position.distance_to(station.global_position) < 50:
                near_terminal = true
                current_station = station
                break
            else:
                near_terminal = false
        
        # Abrir terminal
        if Input.is_action_just_pressed("open_terminal") and (near_terminal or player.has_remote_terminal):
            open_terminal_interface()
    
    func execute_command(command: String, args: Array) -> void:
        if command_dictionary.has(command):
            var target = get_node(command_dictionary[command]["target"])
            command_dictionary[command]["function"].call(target, args)
#Áreas de Segurança
func setup_safe_areas(areas: Array, is_restricted: bool) -> void:
    for area in areas:
        area.body_entered.connect(_on_body_entered.bind(area, is_restricted))
    
    func _on_body_entered(body: Node, area: Area2D, restricted: bool) -> void:
        if body.is_in_group("player"):
            body.can_use_remote_terminal = false
            
            if restricted:
                reset_all_environment_changes()
            else:
                reset_temporary_changes()
#Mecânicas de Chão
func apply_floor_effect(floor_node: Node2D, effect_type: String, parameters: Dictionary) -> void:
    match effect_type:
        "bouncy":
            floor_node.body_entered.connect(_on_bouncy_entered.bind(parameters["jump_multiplier"]))
        
        "accelerator":
            floor_node.body_entered.connect(_on_accelerator_entered.bind(parameters["speed_boost"]))
            floor_node.body_exited.connect(_on_accelerator_exited)
        
        "spikes":
            floor_node.body_entered.connect(_on_spike_entered.bind(parameters["damage"]))
        
        # Adicione outros tipos conforme necessário

func _on_bouncy_entered(body: Node, multiplier: float) -> void:
    if body.is_in_group("player"):
        body.jump_velocity *= multiplier

func _on_accelerator_entered(body: Node, speed_boost: float) -> void:
    if body.is_in_group("player"):
        body.speed_boost = speed_boost
        body.speed_boost_timer.start(0.05) # Pequeno delay após sair

func _on_spike_entered(body: Node, damage: float) -> void:
    if body.is_in_group("player"):
        # Calcular dano baseado na velocidade
        var impact = abs(body.velocity.y)
        body.take_damage(damage * (1 + impact / 1000))
#Inimigos
func setup_enemy_behavior(enemy: CharacterBody2D, behavior_type: String, parameters: Dictionary) -> void:
    match behavior_type:
        "patrol":
            enemy.patrol_range = parameters["range"]
            enemy.patrol_speed = parameters["speed"]
            enemy.process_mode = parameters["mode"] # "fixed_route" ou "follow_player"
        
        "shooter":
            enemy.shoot_cooldown = parameters["cooldown"]
            enemy.bullet_type = parameters["bullet"]
        
        "kamikaze":
            enemy.explosion_delay = parameters["delay"]
            enemy.explosion_radius = parameters["radius"]
        
        "flying":
            enemy.flying_height = parameters["height"]
            enemy.retreat_distance = parameters["retreat"]
    
    # Implementar a lógica específica de cada comportamento
    # no _process ou _physics_process do inimigo
#Bosses
func setup_boss_behavior(boss: Node, boss_type: String, player_ref: Node) -> void:
    match boss_type:
        "doppler_gangar":
            boss.player = player_ref
            boss.health = 1000
            boss.can_use_console = false
            
            # Ativar console na metade da vida
            boss.health_changed.connect(func(hp):
                if hp <= 500:
                    boss.can_use_console = true
            )
        
        "fireball_chase":
            boss.chase_speed = 300
            boss.phase_timer = Timer.new()
            add_child(boss.phase_timer)
            boss.phase_timer.wait_time = 30
            boss.phase_timer.connect("timeout", enter_arena_phase)
            
    func enter_arena_phase() -> void:
        boss.in_arena = true
        # Ativar plataformas móveis
        get_tree().call_group("moving_platforms", "set_active", true)
        
        # Sistema de comandos rápido
        boss.cmd_timer = Timer.new()
        add_child(boss.cmd_timer)
        boss.cmd_timer.wait_time = 10
        boss.cmd_timer.connect("timeout", offer_command_opportunity)
    
    func offer_command_opportunity() -> void:
        # Mostrar prompt para comando rápido
        # Ex: "Digite PLATFORM_STOP para congelar plataformas"
        pass
#exemplo pro meu eu mais problematico denada futuro eu!
# Exemplo de uso no seu player
func _ready():
    setup_player_movement(self, 200.0, 100.0, -400.0, 15.0)
    setup_shooting(self, preload("res://bullet.tscn"), $GunPosition, 10.0, [
        {"time": 0.5, "multiplier": 2},
        {"time": 1.0, "multiplier": 5},
        {"time": 2.0, "multiplier": 12}
    ])
    
    # Após derrotar o boss
    unlock_double_jump(self)
    
    # Quando pegar o overshield
    setup_overshield(self, 3, 10.0)

# Exemplo para chão
func _ready():
    apply_floor_effect(self, "bouncy", {"jump_multiplier": 1.5})